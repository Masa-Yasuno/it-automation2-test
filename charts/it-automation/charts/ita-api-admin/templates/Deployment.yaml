#   Copyright 2022 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
       name: {{ .Values.name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
         name: {{ .Values.name }}
    spec:
      initContainers:
        # temporary response to organization_create_controller.py  organization_create, os.makedirs(organization_dir)
        - name: setup-storage
          command: ["{{ .Values.initContainerCommand.shell  }}", "{{ .Values.initContainerCommand.option }}", "{{ .Values.initContainerCommand.arg }}"]          
          image: {{ .Values.initContainerImage.repository }}:{{ .Values.initContainerImage.tag }}
          imagePullPolicy: {{ .Values.initContainerImage.pullPolicy }}
          volumeMounts:
          - mountPath: {{ .Values.initContainerVolume.mountPath.name }}
            name: persistent-storage
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
          envFrom:
            - secretRef:
                name: {{ .Values.global.dbAccountInfo }}
            - secretRef:
                name: {{ .Values.global.gitLabAccountInfo }}
            - configMapRef:
                name: {{ .Values.global.dbConnectionInfo }}
            - configMapRef:
                name: {{ .Values.global.itaBaseInfo }}
            - configMapRef:
                name: {{ .Values.global.gitLabConnectionInfo }}
            - configMapRef:
                name: params-ita-admin
          volumeMounts:
            - name: ita-api-admin-storage
              mountPath: {{ .Values.volume.mountPath.storage }}
            - name: ita-api-admin-homedir
              mountPath: {{ .Values.volume.mountPath.homeDir }}
            - name: ita-api-admin-pid
              mountPath: {{ .Values.volume.mountPath.pid.path }}
              subPath: {{ .Values.volume.mountPath.pid.subPath }}
            - name: ita-api-admin-socket
              mountPath: {{ .Values.volume.mountPath.socket.path }}
              subPath: {{ .Values.volume.mountPath.socket.subPath }}
            - name: ita-api-admin-tmp
              mountPath: {{ .Values.volume.mountPath.tmp }}
      volumes:
        - name: ita-api-admin-storage
          persistentVolumeClaim:
            claimName: {{ .Values.global.claimName }}
        - name: ita-api-admin-homedir
          emptyDir: {}
        - name: ita-api-admin-pid
          emptyDir: {}
        - name: ita-api-admin-socket
          emptyDir: {}
        - name: ita-api-admin-tmp
          emptyDir: {}
